{"version":3,"sources":["config.js","utils/api.ts","utils/helpers.ts","pages/Bar/Bar.tsx","pages/Cocktails/Cocktails.tsx","pages/Cocktails/AllCocktails.tsx","pages/Cocktails/MyCocktails.tsx","pages/Cocktail/Cocktail.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","API_URL","url","getIngredients","type","parentId","fetch","then","res","json","getCocktail","name","slugify","title","toLowerCase","replace","ingredientList","id","groupCode","useState","l1Ingredients","setL1Ingredients","l2Ingredients","setL2Ingredients","barItems","setBarItems","toggleBarItem","item","prevBarItems","find","i","filter","push","className","data-testid","map","key","onClick","l1Item","l2Item","barItem","length","href","join","Cocktails","cocktails","cocktail","_id","to","AllCocktails","setCocktails","search","setSearch","useEffect","a","query","result","fetchData","value","onChange","e","currentTarget","withRouter","props","ingredients","getCocktailsByIngredients","qs","pairs","substr","split","decodeURIComponent","parseQueryString","location","match","params","setCocktail","image","src","alt","glassType","method","ingredient","amount","measure","App","path","component","Bar","Cocktail","exact","MyCocktails","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3791aa4d.chunk.js","sourcesContent":["module.exports = {\n  API_URL: \"http://localhost:3001\",\n};\n","import { API_URL } from \"../config\";\n\nconst url = `${API_URL}/api`;\n\nexport const getIngredients = (type: string, parentId: string = \"0\") =>\n  fetch(`${url}/ingredients/${type}/${parentId}`).then((res) => res.json());\n\nexport const getCocktail = (name: string) =>\n  fetch(`${url}/cocktails/${name}`).then((res) => res.json());\n\nexport const getAllCocktails = (query?: string) =>\n  fetch(`${url}/cocktails?q=${query}`).then((res) => res.json());\n\nexport const getCocktailsByIngredients = (ingredients: string[]) =>\n  fetch(\n    `${url}/cocktails-by-ingredients?ingredients=${ingredients.join(\",\")}`,\n  ).then((res) => res.json());\n","export const slugify = (title: string): string =>\n  title.toLowerCase().replace(/ /g, \"-\");\n\n/**\n * Receives `?par1=val1&par2=val2`\n * Returns `{ par1: \"val1\", par2: \"val2\" }`\n */\nexport const parseQueryString = (qs: string): { [key: string]: string } => {\n  const query: { [key: string]: string } = {};\n  const pairs = (qs[0] === \"?\" ? qs.substr(1) : qs).split(\"&\");\n\n  for (let i = 0; i < pairs.length; i += 1) {\n    const [key, value] = pairs[i].split(\"=\");\n    if (key) {\n      query[decodeURIComponent(key)] = decodeURIComponent(value || \"\");\n    }\n  }\n  return query;\n};\n","import React, { useState } from \"react\";\n\nimport { getIngredients } from \"../../utils/api\";\nimport { slugify } from \"../../utils/helpers\";\n\nimport \"./Bar.scss\";\n\ntype Item = {\n  id: string;\n  groupCode: string;\n  name: string;\n};\n\nconst ingredientList = [\n  { id: 1, name: \"Popular ingredients\", groupCode: \"PO\" },\n  { id: 2, name: \"Spirits\", groupCode: \"SP\" },\n  { id: 3, name: \"Liqueurs\", groupCode: \"LQ\" },\n  { id: 4, name: \"Wines and Champagnes\", groupCode: \"WI\" },\n  { id: 5, name: \"Beers and Ciders\", groupCode: \"BE\" },\n  { id: 6, name: \"Mixers\", groupCode: \"MX\" },\n  { id: 7, name: \"Others\", groupCode: \"OT\" },\n];\n\nexport default () => {\n  const [l1Ingredients, setL1Ingredients] = useState<Item[]>([]);\n  const [l2Ingredients, setL2Ingredients] = useState<Item[]>([]);\n  const [barItems, setBarItems] = useState<Item[]>([]);\n\n  const loadL1Ingredients = (groupCode: string) => {\n    setL2Ingredients([]);\n    getIngredients(groupCode).then((res) => {\n      if (groupCode === \"PO\") {\n        setL2Ingredients(res);\n      } else {\n        setL1Ingredients(res);\n      }\n    });\n  };\n\n  const loadL2Ingredients = (groupCode: string, parentId: string) => {\n    getIngredients(groupCode, parentId).then(setL2Ingredients);\n  };\n\n  const toggleBarItem = (item: Item) => {\n    let prevBarItems = [...barItems];\n\n    if (prevBarItems.find((i) => i.id === item.id)) {\n      prevBarItems = prevBarItems.filter((i) => i.id !== item.id);\n    } else {\n      prevBarItems.push(item);\n    }\n    setBarItems(prevBarItems);\n  };\n\n  return (\n    <div className=\"bar\">\n      <div className=\"bar__ingredients\">\n        <div className=\"bar__ingredientsList\">\n          <ul data-testid=\"groupList\">\n            {ingredientList.map((item) => (\n              <li key={item.groupCode}>\n                <button onClick={() => loadL1Ingredients(item.groupCode)}>\n                  {item.name}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"bar__ingredientsList\">\n          <ul>\n            {l1Ingredients.map((l1Item: Item) => (\n              <li key={l1Item.id}>\n                <button\n                  onClick={() => loadL2Ingredients(l1Item.groupCode, l1Item.id)}\n                >\n                  {l1Item.name}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"bar__ingredientsList\">\n          <ul>\n            {l2Ingredients.map((l2Item: Item) => (\n              <li key={l2Item.id}>\n                <button onClick={() => toggleBarItem(l2Item)}>\n                  {l2Item.name}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"bar__ingredientsList\">\n          <h4>My bar</h4>\n          <ul>\n            {barItems.map((barItem: Item) => (\n              <li key={barItem.id}>\n                <button onClick={() => toggleBarItem(barItem)}>\n                  {barItem.name}\n                </button>\n              </li>\n            ))}\n          </ul>\n\n          {barItems.length > 0 && (\n            <a\n              href={`/cocktails/my?ingr=${slugify(\n                barItems.map((item) => item.name.toLowerCase()).join(\",\"),\n              )}`}\n            >\n              Get cocktails\n            </a>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { slugify } from \"../../utils/helpers\";\nimport { TCocktail } from \"../Cocktail/Cocktail\";\n\ntype Cocktails$Props = {\n  cocktails: TCocktail[];\n};\n\nconst Cocktails = ({ cocktails }: Cocktails$Props) => {\n  return (\n    <div className=\"cocktails\">\n      <ul>\n        {cocktails.map((cocktail: any) => (\n          <li key={cocktail._id}>\n            <Link to={`/cocktail/${slugify(cocktail.title)}`}>\n              {cocktail.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cocktails;\n","import React, { useEffect, useState, ChangeEvent } from \"react\";\n\nimport { getAllCocktails } from \"../../utils/api\";\n\nimport Cocktails from \"./Cocktails\";\n\nconst AllCocktails = () => {\n  const [cocktails, setCocktails] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await getAllCocktails(search);\n      setCocktails(result);\n    };\n\n    fetchData();\n  }, [search]);\n\n  const onSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = e;\n    setSearch(currentTarget.value);\n  };\n\n  return (\n    <div className=\"cocktails\">\n      <input type=\"text\" value={search} onChange={onSearchChange} />\n      <Cocktails cocktails={cocktails} />\n    </div>\n  );\n};\n\nexport default AllCocktails;\n","import React, { useEffect, useState } from \"react\";\nimport { withRouter, RouteProps } from \"react-router-dom\";\n\nimport { getCocktailsByIngredients } from \"../../utils/api\";\nimport { parseQueryString } from \"../../utils/helpers\";\n\nimport Cocktails from \"./Cocktails\";\n\nconst MyCocktails = (props: RouteProps) => {\n  const [cocktails, setCocktails] = useState([]);\n\n  const getCocktails = () => {\n    const query = props.location ? props.location.search : \"\";\n    const queryIngredients = parseQueryString(query)[\"ingr\"] || \"\";\n    const ingredients = queryIngredients.split(\",\");\n    getCocktailsByIngredients(ingredients).then(setCocktails);\n  };\n\n  useEffect(getCocktails, []);\n\n  return (\n    <div className=\"myCocktails\">\n      <h1>My cocktails</h1>\n      {cocktails.length > 0 ? (\n        <Cocktails cocktails={cocktails} />\n      ) : (\n        <p>\n          Your <a href=\"/bar\">bar</a> is empy\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default withRouter(MyCocktails);\n","import React, { useEffect, useState } from \"react\";\nimport { withRouter, RouteChildrenProps } from \"react-router-dom\";\n\nimport { getCocktail } from \"../../utils/api\";\n\nexport type TIngredient = {\n  name: string;\n  amount: string;\n  measure: string;\n};\n\nexport type TCocktail = {\n  _id: string;\n  title: string;\n  image: string;\n  method: string;\n  glassType: string;\n  ingredients: TIngredient[];\n};\n\ntype Params = {\n  name: string;\n};\n\ntype Cocktails$Props = RouteChildrenProps<Params>;\n\nconst Cocktails = (props: Cocktails$Props) => {\n  const { name } = props && props.match ? props.match.params : { name: \"\" };\n\n  const [cocktail, setCocktail] = useState<TCocktail>();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await getCocktail(name.toLowerCase());\n      setCocktail(result);\n    };\n\n    fetchData();\n  }, [name]);\n\n  if (!cocktail) {\n    return null;\n  }\n\n  return (\n    <div className=\"cocktail\">\n      <h1>{cocktail.title}</h1>\n      {cocktail.image && <img src={cocktail.image} alt=\"\" />}\n      <p>{cocktail.glassType}</p>\n      <p>{cocktail.method}</p>\n      <ul>\n        {cocktail.ingredients.map((ingredient) => (\n          <li key={ingredient.name}>\n            {ingredient.name}: {ingredient.amount} {ingredient.measure}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default withRouter(Cocktails);\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Bar from \"./pages/Bar/Bar\";\nimport AllCocktails from \"./pages/Cocktails/AllCocktails\";\nimport MyCocktails from \"./pages/Cocktails/MyCocktails\";\nimport Cocktail from \"./pages/Cocktail/Cocktail\";\n\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n        <nav className=\"app__nav\">\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/bar\">Bar</Link>\n            </li>\n            <li>\n              <Link to=\"/cocktails\">Cocktails</Link>\n              <ul>\n                <li>\n                  <Link to=\"/cocktails/my\">My Cocktails</Link>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"app__content\">\n          <Switch>\n            <Route path=\"/bar\" component={Bar} />\n            <Route path=\"/cocktail/:name\" component={Cocktail} />\n            <Route path=\"/cocktails\" component={AllCocktails} exact />\n            <Route path=\"/cocktails/my\" component={MyCocktails} />\n            <Route path=\"/\">\n              <div>Home page</div>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}